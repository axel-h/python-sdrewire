#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Author: Stefan Agner

import argparse
import os
import sys
import time
import usb


BITMODE_CBUS = 0x20

SIO_SET_BITMODE_REQUEST = 0x0b
SIO_READ_PINS_REQUEST = 0x0c

# FTDIs CBUS bitmode expect the following value:
# CBUS Bits
# 3210 3210
#      |------ Output Control 0->LO, 1->HI
# |----------- Input/Output   0->Input, 1->Output

# PyUSB control endpoint communication, see also:
# https://github.com/pyusb/pyusb/blob/master/docs/tutorial.rst

def ftdi_set_bitmode(dev, bitmask):
    bmRequestType = usb.util.build_request_type(usb.util.CTRL_OUT,
                                                usb.util.CTRL_TYPE_VENDOR,
                                                usb.util.CTRL_RECIPIENT_DEVICE)

    wValue = bitmask | (BITMODE_CBUS << 8)
    dev.ctrl_transfer(bmRequestType, SIO_SET_BITMODE_REQUEST, wValue)

def ftdi_get_pin(dev):
    bmRequestType = usb.util.build_request_type(usb.util.CTRL_IN,
                                                usb.util.CTRL_TYPE_VENDOR,
                                                usb.util.CTRL_RECIPIENT_DEVICE)

    ret = dev.ctrl_transfer(bmRequestType, SIO_READ_PINS_REQUEST, 0, 0, 1)
    return ret[0] if len(ret) >= 1 else None

def ftdi_find_sdremux(vid=0x0403, pid=0x6015, serial=None):
    devs = usb.core.find(find_all=True, custom_match = \
            lambda d: \
                d.idVendor == vid and \
                d.idProduct == pid and \
                (d.serial_number == serial if serial else True))
    return list(devs)

def get_tty_device(dev):
    # Find /sys device path
    # See: http://gajjarpremal.blogspot.com/2015/04/sysfs-structures-for-linux-usb.html

    # We probably could get configuration/interface using
    # get_active_configuration() and friends. But they are always
    # the same, so why bother.
    cfg = 1
    interface = 0

    port_path = ".".join(str(x) for x in dev.port_numbers)
    device_path = f"/sys/bus/usb/devices/{dev.bus}-{port_path}:{cfg}.{interface}"

    if not os.path.isdir(device_path):
        return None

    for entry in os.listdir(device_path):
        if entry.startswith("ttyUSB"):
            return f"/dev/{entry}"

def print_list(devs):
    print("Found the following devices:")
    tty_device = None
    for dev in sorted(devs, key=lambda dev: dev.address):
        # Try to find /dev/ttyUSBX
        try:
            # Only make sense if the kernel driver is active. This throws an
            # exception on non-Linux platforms.
            if dev.is_kernel_driver_active(0):
                tty_device = get_tty_device(dev)
        except NotImplementedError:
            # Ignore if we can't know if a kernel driver is active, probably not
            # Linux.
            pass

        print(f"Bus {dev.bus:03d} Device {dev.address:03d}: {dev.manufacturer} " +
              f"{dev.product} (Serial: {dev.serial_number}" +
              (f", Device: {tty_device}" if tty_device else "") +
              ")" )

def list_devs(args):
    devs = ftdi_find_sdremux(serial=args.serial)

    if len(devs) == 0:
        print("No SDReWire device found")
    else:
        print_list(devs)

def sdmux_get_device(serial=None):
    devs = ftdi_find_sdremux(serial=serial)

    if len(devs) > 1:
        print_list(devs)
        print()
        print("Please use --serial argument to select a device.")
        return None

    if len(devs) == 0:
        print("No device found.")
        return None

    return devs[0]

def sdmux_get_mode(dev):
    pins = ftdi_get_pin(dev)
    return pins & 0x08

def sdmux_get_mode_str(dev):
    mode = sdmux_get_mode(dev)
    return "DUT" if (0x00 == mode) else \
           "TS" if (0x08 == mode) else \
           f"??? ({mode})"

def sdmux_set_mode(dev, mode):
    mode = mode & 0x08
    ftdi_set_bitmode(dev, mode)
    assert mode == sdmux_get_mode(dev)

def sdmux_mode_dut(dev):
    sdmux_set_mode(dev, 0x00)

def sdmux_mode_ts(dev):
    sdmux_set_mode(dev, 0x08)

def sdmux(args):
    dev = sdmux_get_device(args.serial)
    if not dev:
        return # ToDo: return error

    if args.ts:
        sdmux_mode_ts(dev)
    elif args.dut:
        sdmux_mode_dut(dev)

    if args.status:
        mode = sdmux_get_mode_str(dev)
        print(f"SD mux connected to: {mode}")

def main(params: list):
    """Main program"""

    parser = argparse.ArgumentParser(description='SDReWire control utility.')
    parser.add_argument('--serial', type=str)

    subparsers = parser.add_subparsers(title='Sub-commands')

    parser_sdmux = subparsers.add_parser('sdmux', help='Commands related to SD card muxing')

    sdmux_mode_group = parser_sdmux.add_mutually_exclusive_group()
    sdmux_mode_group.add_argument('--ts', action='store_true', dest="ts", help="Mux SD card to test system")
    sdmux_mode_group.add_argument('--dut', action='store_true', dest="dut", help="Mux SD card to device under test")
    parser_sdmux.add_argument('--status', action='store_true', help="Display current status")
    parser_sdmux.set_defaults(func=sdmux)

    parser_list = subparsers.add_parser('list', help='Print a list of SDReWire devices')
    parser_list.set_defaults(func=list_devs)

    args = parser.parse_args(params)

    if not hasattr(args, 'func'):
        parser.print_help()
        return 1

    args.func(args)
    return 0

if __name__ == "__main__":
    params = sys.argv[1:]  # drop parameter 0, holds name of the program
    ret = main(params)
    sys.exit(ret)
